const express = require('express');
const http = require('http');
const fs = require('fs');
const path = require('path');
const multer = require('multer');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const cookieParser = require('cookie-parser');
const { authMiddleware } = require('./middleware/auth');
const { Server } = require('socket.io');

const DATA_DIR = path.join(__dirname, '..', 'data');
const UPLOADS_DIR = path.join(__dirname, '..', 'uploads');
if (!fs.existsSync(DATA_DIR)) fs.mkdirSync(DATA_DIR, { recursive: true });
if (!fs.existsSync(UPLOADS_DIR)) fs.mkdirSync(UPLOADS_DIR, { recursive: true });

const usersFile = path.join(DATA_DIR, 'users.json');
const tasksFile = path.join(DATA_DIR, 'tasks.json');
const JWT_SECRET = process.env.JWT_SECRET || 'change_this_secret';
const JWT_EXPIRES = '2h';

function readJson(file, def){ try { return JSON.parse(fs.readFileSync(file,'utf8'))||def; } catch { return def; } }
function writeJson(file,data){ fs.writeFileSync(file, JSON.stringify(data, null, 2)); }

if (!fs.existsSync(usersFile)) writeJson(usersFile, []);
if (!fs.existsSync(tasksFile)) writeJson(tasksFile, []);

let users = readJson(usersFile, []);
let tasks = readJson(tasksFile, []);

const app = express();
const server = http.createServer(app);
const io = new Server(server);

// static client
app.use(express.json());
app.use(cookieParser());
app.use(express.static(path.join(__dirname, '..', 'client')));

// multer for uploads
const storage = multer.diskStorage({
  destination: (req,file,cb)=>cb(null, UPLOADS_DIR),
  filename: (req,file,cb)=>cb(null, Date.now()+'-'+file.originalname)
});
const upload = multer({ storage });
app.post('/api/register', async (req, res) => {
  const { email, password } = req.body || {};
  if (!email || !password) return res.status(400).json({ error: 'Email and password required' });
  if (users.find(u=>u.email===email)) return res.status(409).json({ error: 'User exists' });
  const id = Date.now();
  const passwordHash = await bcrypt.hash(password, 10);
  const user = { id, email, passwordHash };
  users.push(user); writeJson(usersFile, users);
  const token = jwt.sign({ userId: user.id, email: user.email }, JWT_SECRET, { expiresIn: JWT_EXPIRES });
  res.cookie('token', token, { httpOnly: true, sameSite: 'lax' }); res.status(201).json({ message: 'registered' });
});

app.post('/api/login', async (req, res) => {
  const { email, password } = req.body || {};
  const user = users.find(u=>u.email===email);
  if (!user) return res.status(401).json({ error: 'Invalid credentials' });
  const ok = await bcrypt.compare(password, user.passwordHash);
  if (!ok) return res.status(401).json({ error: 'Invalid credentials' });
  const token = jwt.sign({ userId: user.id, email: user.email }, JWT_SECRET, { expiresIn: JWT_EXPIRES });
  res.cookie('token', token, { httpOnly: true, sameSite: 'lax' }); res.json({ message: 'ok' });
});

app.post('/api/logout', (req,res)=>{ res.clearCookie('token'); res.json({ message: 'logged out' }); });
app.get('/api/me', authMiddleware(JWT_SECRET), (req,res)=> res.json({ userId: req.user.userId, email: req.user.email }));

// upload endpoint
app.post('/api/upload', authMiddleware(JWT_SECRET), upload.single('file'), (req,res)=>{
  if (!req.file) return res.status(400).json({ error: 'file required' });
  res.json({ filename: req.file.filename, originalname: req.file.originalname });
});

// download attachment
app.get('/api/tasks/:id/files/:filename', authMiddleware(JWT_SECRET), (req,res)=>{
  const p = path.join(UPLOADS_DIR, req.params.filename);
  if (!fs.existsSync(p)) return res.status(404).json({ error: 'file not found' });
  res.download(p);
});

io.use((socket, next) => {
  try {
    const cookie = socket.handshake.headers.cookie || '';
    const match = cookie.split(';').map(s=>s.trim()).find(s=>s.startsWith('token='));
    if (!match) return next(new Error('Unauthorized'));
    const token = match.split('=')[1];
    const user = jwt.verify(decodeURIComponent(token), JWT_SECRET);
    socket.user = user;
    return next();
  } catch (e) { return next(new Error('Unauthorized')); }
});

io.on('connection', (socket) => {
  tasks = readJson(tasksFile, []);
  socket.emit('tasks', tasks);

  socket.on('requestTasks', () => {
    tasks = readJson(tasksFile, []);
    socket.emit('tasks', tasks);
  });

  socket.on('create', (data) => {
    const { title, status='pending', dueDate=null, attachment } = data || {};
    if (!title) return socket.emit('error', { error: 'title required' });
    const task = { id: Date.now(), title, status, dueDate: dueDate || null, attachments: attachment ? [attachment] : [] };
    tasks.push(task); writeJson(tasksFile, tasks);
    socket.emit('created', task);
  });

  socket.on('toggle', (data) => {
    const id = Number(data.id);
    const idx = tasks.findIndex(t=>t.id===id);
    if (idx===-1) return socket.emit('error', { error: 'not found' });
    tasks[idx].status = tasks[idx].status === 'done' ? 'pending' : 'done';
    writeJson(tasksFile, tasks);
    socket.emit('updated', tasks[idx]);
  });

  socket.on('delete', (data) => {
    const id = Number(data.id);
    const idx = tasks.findIndex(t=>t.id===id);
    if (idx===-1) return socket.emit('error', { error: 'not found' });
    tasks.splice(idx,1); writeJson(tasksFile, tasks);
    socket.emit('deleted', id);
  });
});

app.get('*', (req,res) => res.sendFile(path.join(__dirname, '..', 'client', 'index.html')));
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => console.log('Lab4 server listening on', PORT));
